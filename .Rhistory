}
sort(weight)
sum(weight)
weight.f
weight[f]
weight['f']
for(i in names(sort(weight))){
print(i)
}
total=sum(weight)
for(i in names(sort(weight))){
if(total-weight[i]<=600){
print(i)
break
}
}
#1
##1-1
accident<-c(31,26,42,47,50,54,70,66,43,32,32,22)
names(accident)<-c('M1','M2','M3','M4','M5','M6',
'M7','M8','M9','M10','M11','M12')
accident
##1-2
sum(accident)
##1-3
max(accident)
min(accident)
##1-4
accident*0.9
##1-5
accident[accident>=50]
##1-6
month.50<-accident[accident>=50]
names(month.50)
names(accident[accident>=50])
##1-7
length(accident[accident<50])
##1-8
M6.acc<-accident[6]
accident[accident>M6.acc]
accident[accident>accident[6]]
#2
a<-25:150
condi<-a[a%%3==0&a<100]
length(condi)
#3
weight<-c(56,23,89,46,76,14,97,72,68,62,35)
names(weight)<-c('a','b','c','d','e','f','g','h','i','j','k')
total=sum(weight)
for(i in names(sort(weight))){
if(total-weight[i]<=600){
print(i)
break
}
}
espresso<-c(4,5,3,6,5,4,7)
americano<-c(63,68,64,68,72,89,94)
latte<-c(61,70,759,71,71,92,88)
sale.espresso<-espresso*2
sale.americano<-americano*2.5
sale.latte<-latte*3.0
sale.day<-sale.espresso+sale.americano+sale.latte
names(day)<-c('Mon','Tue','Wed','Thu','Fri','Sat','Sun')
espresso<-c(4,5,3,6,5,4,7)
americano<-c(63,68,64,68,72,89,94)
latte<-c(61,70,759,71,71,92,88)
sale.espresso<-espresso*2
sale.americano<-americano*2.5
sale.latte<-latte*3.0
sale.day<-sale.espresso+sale.americano+sale.latte
names(sale.day)<-c('Mon','Tue','Wed','Thu','Fri','Sat','Sun')
sum(sale.day)
sale.mean<-mean(sale.day)
names(sale.day[sale.day>=sale.mean])
names(sale.day[sale.day>=sale.mean])
a<-25:150
condi<-a[a%%3==0 & a<100]
length(condi)
a
a<-c('good','great','bad','okay','good','bad','good')
f<-factor(a)
class(a)
f<-factor(a)
levels(f)
class(f)
price<-c(76000,52000,36000)
promotion<-c(5,10,5)
price/100*(100-promotion)
smartphone<-list(model="iphone_se",
capacity=c(64,128,256),
display='Retina',
color=c('black','red','white'))
smartphone['color']
smartphone$color
weight<-c(56,23,89,46,76,14,97,72,68,62,35) #단위 kg
names(weight)<-c('a','b','c','d','e','f','g','h','i','j','k')
for(i in sort(names(weight))){
if(sum(weight)-weight[i]>600){
print(i)
break
}
}
for(i in sort(names(weight))){
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
for(i in sort(names(weight))){
print(i)
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
sort(names(weight))
for(i in names(sort(weight))){
print(i)
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
favorite<-factor('여름','봄','여름','겨울','봄',
'겨울','여름','여름','봄','가을')
favorite<-factor('여름','봄','여름','겨울','봄',
'겨울','여름','여름','봄','가을')
favorite<-factor('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을')
favorite<-factor(c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을'))
levels(favorite)
unique(favorite)
a=c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을')
unique(a)
levels(a)
country<-factor(c('호주','독일','영국','일본','미국',
'중국','호주','영국','중국','일본',
'터키','미국','중국','중국','호주',
'터키','독일','일본','중국','독일'))
levels(county)
as.integer(country)
levels(country)
post<-list(
user_id:'mr_steve',
post_id:'p11010',
view:37,
image:False,
like:c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=False,
like=c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=False,
like=c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=FALSE,
like=c('creeper','alex','skeleton','enderman'))
post
account<-list(
name='하늘',
number='123-456-789',
balance=4128750,
history=c(-50000,+20000,-32500,-79000,+42000)
)
입금=account[history]
입금=account[history]
입금<-account[history]
입금<-account['history']
입금<-account$history
account<-list(name='하늘',
number='123-468-120566',
balance=4128750,
history=c(-50000,20000,-32500,-79000,42000))
account$history
입금<-account$history
length9account$history[account$history>0])
length(account$history[account$history>0])
length(account$history[account$history<0])
x<-c(2,4,6,8)
y<-c(10,12,14,16)
z<-c(18,20,22,24)
m<-cbind(x,y,z)
m
a<-matrix(v,nrow=3,byrow=T)
v<-seq(from=5,to=60,by=5)
a<-matrix(v,nrow=3,byrow=T)
a
b<-matrix(v,ncol=4,byrow=F)
b
x<-c(2,4,6,8)
y<-c(10,12,14,16)
z<-c(18,20,22,24)
m<-cbind(x,y,z)
m
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4, byrow=F)
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4, byrow=T)
m
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4,byrow=T)
matrix(c(2,4,6,8,
10,12,14,16,
18,20,22,24),
ncol=3,byrow=F)
score<-matrix(c(100,78,80,
80,50,65),
nrow=2,byrow=T)
a<-c(100,78,80)
b<-c(80,50,65)
c<-rbind(a,b)
score
c
m<-matrix(c(9,7,5,3,
8,11,2,9),
nrow=2,byrow=T)
m
m<-matrix(c(9,7,5,3,
8,11,2,9),
nrow=2,byrow=T)
rownames(m)<-c('a','b')
colnames(m)<-c(1,2,3,4)
m
m<-m.t
m<-m.T
m<-m.t()
m
m<-t(m)
m
df<-data.frame(m)
df
df.new<-dataframe(df,info=c(1,2,3,4),rownames='c')
df.new<-data.frame(df,info=c(1,2,3,4),rownames='c')
#df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-data.frame(df,info=c(1,2,3,4))
#df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-rbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
m
m<-t(m)
m<-t(m)
m
df<-data.frame(m)
df
df.new<-data.frame(df,info=c(1,2,3,4))
df.new
class(df.new)
blood<-c('A','O','AB','B','B')
rh<-c('+','+','-','+','+')
age<-c(21,30,43,17,26)
df<-data.frame(blood,rh,age)
df
colnames(df)
rownames(df)
df['blood']
df['blood'][df['blood']!='B']
susbset(df,df['blood']!='B')
subset(df,df['blood']!='B')
class(cars)
dim(cars)
head(cars)
str(cars)
rowMeans(cars)
max(cars$dist)
subset(cars[c('speed','dist')],cars['dist']==max(cars['dist']))
levels(InsectSprays$spray)
table(InsectSprays$spray)
InsectSprays.e=subset(InsectSprays,InsectSprays['spray']=='E')
InsectSprays.e
mean(InsectSprays.e)
colmean(InsectSprays.e)
colMean(InsectSprays.e)
colMeans(InsectSprays.e)
colMeans(InsectSprays.e['count'])
mean(InsectSprays.e['count'])
colMeans(InsectSprays.e['count'])
love<-data.frame(제목,좋아요)
제목<-c('그대랑','다툼','빨래','두통','보조개','매듭','이상해')
좋아요<-c(1,2,3,4,5,6,7)
love<-data.frame(제목,좋아요)
love
best<-subset(love,love['좋아요']==max(love['max']))
best<-subset(love,love['좋아요']==max(love['좋아요']))
best
llist<-list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
llist
list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
c('cyan','magenta','yellow','black')
factor(TRUE, FALSE, FALSE, TRUE)
factor(c(TRUE, FALSE, FALSE, TRUE))
sales<-c(20,15,21,19,33,42,10)
sales
names(sales)<-c('M', 'T', 'W', 'Th', 'F', 'Sa', 'Su')
sales
sort(sales)
good_sales_days(n)<-function{
return(names(sales[sales>=n]))
}
sales[sales>=n]
sales[sales>=30]
names(sales[sales>=30])
good_sales_days <- function(n){
return(names(sales[sales>=n]))
}
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
a <- 10
func <-function() {
a <- 20   # Q3.1. Is it local or global variable?
}
func()
print(a) # Q3.2. what is the value of a?
c('cyan','magenta','yellow','black')
factor(c(TRUE, FALSE, FALSE, TRUE))
list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
sales<-c(20,15,21,19,33,42,10)
sales
names(sales)<-c('M', 'T', 'W', 'Th', 'F', 'Sa', 'Su')
sales
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
for i in good_sales_days(30)
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
factor(good_sales_days(30))
for(i in good_sales_days(30))
print(i)
x<-1:4
y<-5:8
m1<-cbind(x,y)
m1
m2<-rbind(x,y)
m2
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow = 3, byrow=T)
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('열량','나트륨','포화지방')
burger
burger['M']
burger['M',]
bureger['M','na'] #M사의 나트퓸 함량량
bureger['M','나트륨륨'] #M사의 나트퓸 함량량
bureger['M','나트륨'] #M사의 나트퓸 함량량
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow = 3, byrow=T)
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('열량','나트륨','포화지방')
burger
burger['M','나트륨'] #M사의 나트륨 함량량
burger['M',] #M사의 모든 영양 정보
burger[,'열량'] #모든 브랜드의 칼로리 정보
m1<-matrix(1:4,2,2)
m1
m2<-matrix(1:2,2,1)
m2
m1%*%m2
state
class(state)
class(state.x77)
state.x77
class(state.x77)
state.x77
is.matrix(state.x77)
st
is.data.frame(state.x77)
type(state.x77)
class(state.x77)
class(trees)
stre(trees)
girth.mean<-mean(trees$Girth)
trees[trees$Girth>girth.mean && trees$Height>80 && trees$Volume>50]
girth.mean
trees[trees$Girth>girth.mean & trees$Height>80 & trees$Volume>50]
candidate<-subset(trees,Girth>girth.mean & Height>80 & Volume>50)
candidate
#1.다음과 같이 팝업창을 띄어 값을 입력받기 위한 명령문을 완성하시오.
library(svDialogs)
input.value<-dlgInput('Input a value')$res
#2.print()함수의 경우 자동으로 줄바꿈을 하지만 cat()함수는 줄바꿈을 하지 않는다. cat()함수에서 줄바꿈을 위해 어떤 문자열을 추가해야 하는지 적으시오.
cat('\n')
#3.
getwd()
ds<-read.xlsx('airquality.xlsx',header=T,sheetIndex=1) #파일읽기
ds<-read.xlsx('airquality.xlsx',header=T,sheetIndex=1) #파일읽기
#5.엑셀 파일을 불러오고 저장하기 위한 명령문을 완성하시오.
library(xlsx)
ds<-read.xlsx('airquality.xlsx',header=T,sheetIndex=1) #파일읽기
write.xlsx(ds,'data_new.xlsx',row.names=F) #파일쓰기, index를 주지 않음
ds<-read.xlsx('airquality.xlsx',header=T,sheetIndex=1) #파일읽기
write.xlsx(ds,'data_new.xlsx',row.names=F) #파일쓰기, index를 주지 않음
ds
ds<-read.xlsx('airquality.xlsx',header=T,sheetIndex=1) #파일읽기
library(xlsx)
ds<-read.xlsx('airquality.xlsx',header=T,sheetIndex=1) #파일읽기
write.xlsx(ds,'airquality_new.xlsx',row.names=F) #파일쓰기, index를 주지 않음
ds<-read.xlsx('auto_mpg.xlsx',header=T,sheetIndex=1) #파일읽기
ds<-read.xlsx('airquality.xlsx.xlsx',header=T,sheetIndex=1) #파일읽기
write.xlsx(ds,'airquality_new.xlsx',row.names=F) #파일쓰기, index를 주지 않음
#5.엑셀 파일을 불러오고 저장하기 위한 명령문을 완성하시오.
setwd('C:\\Users\\Cho\\Desktop\\단국\\2학년 2학기\\데이터사이언스\\수업자료, 복습')
library(xlsx)
ds<-read.xlsx('airquality.xlsx.xlsx',header=T,sheetIndex=1) #파일읽기
write.xlsx(ds,'airquality_new.xlsx',row.names=F) #파일쓰기, index를 주지 않음
ds<-read.xlsx('airquality.xlsx',header=T,sheetIndex=1) #파일읽기
write.xlsx(ds,'airquality_new.xlsx',row.names=F) #파일쓰기, index를 주지 않음
sink('result.txt',append=T)
cat('a','b','c')
sink()
area<-function(base,height){
return (base*height/2)
}
area(10,10)
area<-function(base,height){
return (base*height/2)
}
##밑변과 높이를 입력
base<-as.numeric(dlgInput('밑변의 길이')$res)
height<-as.numeric(dlgInput('높이')$res)
base<-as.numeric(dlgInput('length of base')$res)
height<-as.numeric(dlgInput('length of height')$res)
print('삼각형의 넓이는',area(base,height),'입니다.')
cat('삼각형의 넓이는',area(base,height),'입니다.')
#8.다음은 ds_tab.txt 파일에 저장된 데이터의 일부이다. 각 열은 탭으로 구분되어 있고 헤더는 포함되어 있지 않다고 했을 때 이 파일을 불러오기 위한 명령문을 작성하시오.
df=read.table('ds_tab.txt',sep="\t")
df
#8.다음은 ds_tab.txt 파일에 저장된 데이터의 일부이다. 각 열은 탭으로 구분되어 있고 헤더는 포함되어 있지 않다고 했을 때 이 파일을 불러오기 위한 명령문을 작성하시오.
df=read.table('ds_tab.txt',header=F,sep="\t")
df
#8.다음은 ds_tab.txt 파일에 저장된 데이터의 일부이다. 각 열은 탭으로 구분되어 있고 헤더는 포함되어 있지 않다고 했을 때 이 파일을 불러오기 위한 명령문을 작성하시오.
df=read.table('ds_tab.txt',header=F,sep="\t")
df
#9.다음과 같이 ds.txt를 ds.csv로 변경하여 저장하기 위한 명령문을 작성하시오.
df_input=read.table(ds.txt,sep="\t",header=F)
#9.다음과 같이 ds.txt를 ds.csv로 변경하여 저장하기 위한 명령문을 작성하시오.
df_input=read.table('ds_tab.txt',sep="\t",header=F)
write.csv(df_input,'ds_tab.csv',row.names = F)
df_input
df_output=read.csv('ds_tab.csv')
df_output
#10.엑셀을 이용해 R에 내장되어 있는 iris데이터셋을 분석하려고 한다.
iris
#10.엑셀을 이용해 R에 내장되어 있는 iris데이터셋을 분석하려고 한다.
write.xlxs(iris,'iris.xlsx',header=T)
#10.엑셀을 이용해 R에 내장되어 있는 iris데이터셋을 분석하려고 한다.
write.xlsx(iris,'iris.xlsx',header=T)
#10.엑셀을 이용해 R에 내장되어 있는 iris데이터셋을 분석하려고 한다.
write.xlsx(iris,'iris.xlsx')
read.xlsx('iris.xlsx')
iris_df=read.xlsx('iris.xlsx')
#10.엑셀을 이용해 R에 내장되어 있는 iris데이터셋을 분석하려고 한다.
write.xlsx(iris,'iris.xlsx',row.names = F)
iris_df=read.xlsx('iris.xlsx')
iris_df=read.xlsx('iris.xlsx',header=T,sheetIndex = 1)
iris_df
library(svDialogs)
sink('log.txt')
cat('------x*y------\n')
sink()
x<-as.numeric(dlgInput('Input X')$res)
y<-as.numeric(dlgInput('Input Y')$res)
sink('log.txt',append=T)
cat('x=',x,'y=',y,'result=',x*y,'\n')
sink()
