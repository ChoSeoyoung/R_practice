a<-25:100
condi<-a[a%%3==0 & a<100]
length(condi)
a<-25:100
condi<-a[a%%3==0 & a<100]
length(condi)
a<-c('good','great','bad','okay','good','bad','good')
f<-factor(a)
type(f)
levels(f)
total<-price*(1-promotions)
price<-c(76000,52000,36000)
promotion<-c(0.05,0.1,0.05)
total<-price*(1-promotions)
total<-price*(1-promotion)
toal
total
smartphone<-list(model="iphone_se",
capacity=c(64,128,256),
display='Retina',
color=c('black','red','white'))
smartphone$color
weight<-c(56,23,89,46,76,14,97,72,68,62,35) #단위 kg
names(weight)<-c('a','b','c','d','e','f','g','i','j','k')
total=sum(weight)
for(i in sort(names(weight))){
if(total-weight[i]<=600){
print(i)
break
}
}
weight
sort(names(weight))
for(i in sort(weight)){
if(total-weight[i]<=600){
print(i)
break
}
}
total=sum(weight)
for(i in sort(weight)){
if(total-weight[i]<=600){
print(i)
break
}
}
weight
total=sum(weight)
for(i in names(sort(weight))){
if(total-weight[i]<=600){
print(i)
break
}
}
weight
names(sort(weight))
##8
weight<-c(56,23,89,46,76,14,97,72,68,62,35) #단위 kg
names(weight)<-c('a','b','c','d','e','f','g','h','i','j','k')
total=sum(weight)
for(i in names(sort(weight))){
if(total-weight[i]<=600){
print(i)
break
}
}
names(sort(weight))
total=sum(weight)
for(i in names(sort(weight))){
if(total-weight[i]<=600){
print(i)
break
}
}
##9
favorite<-factor('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을을')
##9
favorite<-factor('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을')
##9
favorite<-factor(c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을'))
##9
favorite<-factor(c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을'))
levels(favorite)
country<-factor(c('호주','독일','영국','일본',
'미국','중국','호주','영국',
'중국','일본','터키','미국',
'중국','중국','호주','터키',
'독일','일본','중국','독일'))
levels(country)
as.integer(country)
as.integer(country) #실수/문자형 벡터를 정수형으로 변환환
post<-list(user_id='mr_steve',
post_id='p11010',
view=37,
image=FALSE,
like=c('creeper','alex','skeleton','enderman'))
post
account<-list(name='하늘',
number='123-468-120566',
balance=4128750,
history=c(-50000,20000,-32500,-79000.42000))
입금=count(account$history[account$history>0])
입금=length(account$history[account$history>0])
입금=length(account$history[account$history>0])
입금
account$history[account$history>0]
##12
account<-list(name='하늘',
number='123-468-120566',
balance=4128750,
history=c(-50000,20000,-32500,-79000,42000))
입금=length(account$history[account$history>0])
입금
입금횟수=length(account$history[account$history>0])
account<-list(name='하늘',
number='123-468-120566',
balance=4128750,
history=c(-50000,20000,-32500,-79000,42000))
입금횟수=length(account$history[account$history>0])
출금횟수=length(account$history[account$history<0])
print(입금횟수, 출금횟수)
account<-list(name='하늘',
number='123-468-120566',
balance=4128750,
history=c(-50000,20000,-32500,-79000,42000))
입금횟수=length(account$history[account$history>0])
출금횟수=length(account$history[account$history<0])
print(입금횟수)
print(출금횟수)
##코드 5-2
x<-1:4
y<-5:8
z<-matrix(1:20,nrow=4,ncol=5)
m<-cbind(x,y)
m1
m2<-rbind(x,y)
m2
m3<-rbind(m2,x)
m3
m4<-cbind(z,x)
m4
##코드 5-2
x<-1:4
y<-5:8
z<-matrix(1:20,nrow=4,ncol=5)
m1<-cbind(x,y)
m1
m2<-rbind(x,y)
m2
m1<-cbind(x,y) #x와 y를 열 방향으로 결합하여 매트릭스 생성
m1
m2<-rbind(x,y) #x와 y를 행 방향으로 결합하여 매트릭스 생성
m2
m3<-rbind(m2,x) #매트릭스 m2와 벡터 x를 행 방향으로 결합
m3
m4<-cbind(z,x) #매트릭스 z와 벡터 x를 열 방향으로 결합
m4
#연속된 숫자가 아닌 2차원 자료를 저장하려면
score<-matrix(c(100,78,80,80,50,65),nrow=2,byrow=T)
score
#확인문제1
v<-seq(from=5, to=60, by=5)
v
#확인문제1
v<-seq(from=5, to=60, by=5)
a<-matrix(v,nrow=4, ncol=3, byrow=T)
b<-matrix(v,nrow=4, ncol=3, byrow=F)
a
b
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow=3,
byrow=T)
burger #매트릭스의 내용 확인
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('kcal','na','fat')
burger
burger['M','na']
burger['M',]
burger[,'kcal']
iris
iris[,c(1:2)]#1~2열의 모든 데이터
iris[,c(1,3,5)]#1,3,5열의 모든 데이터
iris[,c(1:5)]#1,5열의 모든 데이터
iris[,c(1,5)]#1,5열의 모든 데이터
iris[,c("Sepal.Length","Species")]#1,5열의 모든 데이터
##코드 5-2
x<-1:4
y<-5:8
z<-matrix(1:20,nrow=4,ncol=5)
m1<-cbind(x,y) #x와 y를 열 방향으로 결합하여 매트릭스 생성
m1
m2<-rbind(x,y) #x와 y를 행 방향으로 결합하여 매트릭스 생성
m2
m3<-rbind(m2,x) #매트릭스 m2와 벡터 x를 행 방향으로 결합
m3
m4<-cbind(z,x) #매트릭스 z와 벡터 x를 열 방향으로 결합
m4
#연속된 숫자가 아닌 2차원 자료를 저장하려면
score<-matrix(c(100,78,80,80,50,65),nrow=2,byrow=T) #byrow=F가 default값
#확인문제1
v<-seq(from=5, to=60, by=5)
a<-matrix(v,nrow=4, ncol=3, byrow=T)
b<-matrix(v,nrow=4, ncol=3, byrow=F)
a
b
##LAB1
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow=3,
byrow=T)
burger #매트릭스의 내용 확인
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('kcal','na','fat')
burger
burger['M','na']
burger['M',]
burger[,'kcal']
iris
iris[,c(1:2)]#1~2열의 모든 데이터
iris[,c(1,3,5)]#1,3,5열의 모든 데이터
iris[,c(1,5)]#1,5열의 모든 데이터
iris[,c("Sepal.Length","Species")]#1,5열의 모든 데이터
iris[c(1:5),]#1~5행의 모든 데이터
iris[c(1,3),]#1~5행의 데이터 중 1,3열의 데이터
burger<-data.frame(c(514,533,566),
c(917,853,888),
c(11,13,10),
c('새우','불고기','치킨'))
burger
burger<-data.frame(kcal=c(514,533,566),
na=c(917,853,888),
fat=c(11,13,10),
menu=c('새우','불고기','치킨'))
burger
rownames<-c('M','L','B')
burger
rownames(burger)<-c('M','L','B')
burger
burger[c('M','B'),'menu']
##매트릭스와 데이터프레임
dim(iris)
ncol(iris)
#행과 열의 방향 변환하기
z<-matrix(1:20,nrow=4,ncol=5)
#확인문제
colSums(mtcars); colMeans(mtcars)
rowSums(mtacrs)l rowMeans(mtcars)
subset(mtcars, hp>=100&hp<200)
mtcars[,1:3]*0.9+1
class(trees)
str(trees)
girth.mean<-mean(trees$Girth)
candidate<-subset(trees, Girth>=girth.mean&Height>80&Volume>50)
candidate<-subset(trees, Girth>=girth.mean&Height>80&Volume>50)
candidate
nrow(candidate)
##실전분석
install.packages('reshape2')
library(reshape2)
tips
install.packages('reshape2')
library(reshape2)
tips
