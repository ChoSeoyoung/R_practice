}
}
my_median<-functon(arr){
n=length(arr)
if(n<1){return(NA)}
arr=sort(arr)
if(n%%2==0){
return((arr[n/2]+arr[n/2+1])/2)
}
else{
return(arr[ceiling(n/2)])
}
}
my_mean<-function(arr){
n=length(arr)
if(n<1)return(NA)
return (sum(arr)/n)
}
my_median<-function(arr){
n=length(arr)
if(n<1){return(NA)}
arr=sort(arr)
if(n%%2==0){
return((arr[n/2]+arr[n/2+1])/2)
}
else{
return(arr[ceiling(n/2)])
}
}
my_mean(salary)
my_median(salary)
hist(salary)
salary<-runif(9,200,500)
salary
#Add 10000 as the 10th number
salary[length(salary)+1]=10000
salary
my_mean<-function(arr){
n=length(arr)
if(n<1)return(NA)
return(sum(arr)/n)
}
mean(arr)
mean(salary)
my_mean(salary)
my_median<-function(arr){
n=length(n)
if(n<1)return(NA)
arr<-sort(arr)
if(n%%2==0) return((arr[n/2]+arr[n/2+1])/2)
else return(arr[ceiling(n/2)])
}
median(salary)
my_median(salary)
my_median<-function(arr){
n=length(arr)
if(n<1)return(NA)
arr<-sort(arr)
if(n%%2==0) return((arr[n/2]+arr[n/2+1])/2)
else return(arr[ceiling(n/2)])
}
my_median(salary)
hist(salary)
grp1<-rnorm(20,130,20)
print(grp1)
grp2<-rnorm(30,140,20)
print(grp2)
p1<-hist(grp1)
p2<-hist(grp2)
plot(p1,col=rgb(0,0,1,1/4),main='',xlim=c(50,200),ylim=c(0,20))
plot(p2,col=rgb(1,0,0,1/4),main='',xlim=c(50,200),ylim=c(0,20),add=T)
t.test(grp1,grp2,alternative = "less")
tData=cbind(grp1,grp2)
dimnames(tData)[[2]]<-c('grp1','grp2')
class(tData)
View(tData)
setwd("C:\Users\Cho\Desktop\단국\2학년 2학기\데이터사이언스")
write.csv(tData,"tData.csv")
tData=cbind(grp1,grp2)
dimnames(tData)[[2]]<-c('grp1','grp2')
class(tData)
View(tData)
write.csv(tData,"tData.csv")
n=100*1000*1000
scores<-rnorm(n,80,15) #Normal Distribution
hist(scores)
mean(scores)
sd(scores)
max(scores)
min(scores)
usores<-floor(runif(n,0,100)) #uniform Distribution
hist(uscores)
mean(uscores)
sd(uscores)
max(uscores)
min(uscores)
n=100*1000*1000
scores<-rnorm(n,80,15) #Normal Distribution
hist(scores)
mean(scores)
sd(scores)
max(scores)
min(scores)
usores<-floor(runif(n,0,100)) #uniform Distribution
hist(uscores)
mean(uscores)
sd(uscores)
max(uscores)
min(uscores)
uscores<-floor(runif(n,0,100)) #uniform Distribution
hist(uscores)
mean(uscores)
sd(uscores)
max(uscores)
min(uscores)
#Generate 100,000,000 test scores with μ(80,15) and save into “scores” (vector)
n=100*1000*1000
scores<-rnorm(n,80,15) #Normal Distribution
hist(scores)
mean(scores)
sd(scores)
max(scores)
min(scores)
uscores<-floor(runif(n,0,100)) #uniform Distribution
hist(uscores)
mean(uscores)
sd(uscores)
max(uscores)
min(uscores)
my_sum<-function(arr){
result=0
for(a in arr){
result=result+a
}
return(result)
}
my_sum(scores)
sum(scores)
my_avg<-function(arr){
n=length(arr)
if(n<1)return(NA)
return (sum(arr)/n)
}
my_avg(scores)
mean(scores)
my_sd<-function(arr){
avg<-mean(arr)
arr2<-(arr-avg)*(arr-avg)
return(mean(arr2))
}
my_sd(scores)
sd(scores)
mean(scores)
my_sd<-function(arr){
avg<-mean(arr)
arr2<-(arr-avg)*(arr-avg)
return(sqrt(mean(arr2)))
}
my_sd(scores)
sd(scores)
#Generate 100,000,000 test scores with μ(80,15) and save into “scores” (vector)
n=100*1000*1000
scores<-rnorm(n,80,15) #Normal Distribution
hist(scores)
mean(scores)
sd(scores)
max(scores)
min(scores)
uscores<-floor(runif(n,0,100)) #uniform Distribution
hist(uscores)
mean(uscores)
sd(uscores)
max(uscores)
min(uscores)
#Use my_sum() to print the sum. Is it working? What is the data type of the sum?
my_sum<-function(arr){
result=0
for(a in arr){
result=result+a
}
return(result)
}
my_sum(scores)
sum(scores)
#Make my_avg() and my_sd() and see if it is close to μ(80,15)
my_avg<-function(arr){
n=length(arr)
if(n<1)return(NA)
return (sum(arr)/n)
}
my_avg(scores)
mean(scores)
my_sd<-function(arr){
avg<-mean(arr)
arr2<-(arr-avg)*(arr-avg)
return(sqrt(mean(arr2)))
}
my_sd(scores)
sd(scores)
#What do you call this type of distribution? Normal Distribution
#Include the Histogram.
hist(scores)
hanoi<-functon(n,src,dest,tmp){
if(n==1){
cat("move dist from ",src,"to ",dest,"\n")
}else{
hanoi(n-1,src,tmp,dest)
cat("move dist from ",src,"to ",dest,"\n")
hanoi(n-1,tmp,dest,src)
}
}
#Recursion: Tower of hanoi
hanoi<-function(n,src,dest,tmp){
if(n==1){
cat("move dist from ",src,"to ",dest,"\n")
}else{
hanoi(n-1,src,tmp,dest)
cat("move dist from ",src,"to ",dest,"\n")
hanoi(n-1,tmp,dest,src)
}
}
hanoi(2,1,3,2)
hanoi(3,1,3,2)
hanoi(10,1,3,2)
R<-1
S<-2
p<-3
rsp_name<-function(n){
if(n==R) return("Rock")
else if(n==S) return("Scissor")
else if(n==P) return("Paper")
else return("BS")
}
who_won<-function(c,u){
if(c==R){
if(u==p){
return ("User:)")
}else if(u==R){
return ("Draw")
}else return("Computer T.T")
}else if(c==S){
if(u==R){
return ("User:)")
}else if(u==S){
return ("Draw")
}else return("Computer T.T")
}else if(c==P){
if(u==S){
return ("User:)")
}else if(u==P){
return ("Draw")
}else return("Computer T.T")
}
}
input=0
while(input!='q'){
#User RSP
input<-readline(propmt="Enter your choice(r/s/p/q(uit):")
if(input=='r'){
user<-R
}else if(input=='s'){
user<-S
}else if(input=='p'){
user<-P
}else{
user<-0
}
if(input=='q'){
print('Bye~')
break
}else if(user==0){
cat("User:",rsp_name(user),"|")
print("RSP again!")
next #continue
}
cat("User:",rsp_name(com),"|")
#Computer RSP
com<-floor(runif(1,1,4))
cat("Com",rsp_name(com),"|")
cat("=>The winner:",who_won(com,user))
}
R<-1
S<-2
p<-3
rsp_name<-function(n){
if(n==R) return("Rock")
else if(n==S) return("Scissor")
else if(n==P) return("Paper")
else return("BS")
}
who_won<-function(c,u){
if(c==R){
if(u==p){
return ("User:)")
}else if(u==R){
return ("Draw")
}else return("Computer T.T")
}else if(c==S){
if(u==R){
return ("User:)")
}else if(u==S){
return ("Draw")
}else return("Computer T.T")
}else if(c==P){
if(u==S){
return ("User:)")
}else if(u==P){
return ("Draw")
}else return("Computer T.T")
}
}
input=0
while(input!='q'){
#User RSP
input<-readline(prompt="Enter your choice(r/s/p/q(uit):")
if(input=='r'){
user<-R
}else if(input=='s'){
user<-S
}else if(input=='p'){
user<-P
}else{
user<-0
}
if(input=='q'){
print('Bye~')
break
}else if(user==0){
cat("User:",rsp_name(user),"|")
print("RSP again!")
next #continue
}
cat("User:",rsp_name(com),"|")
#Computer RSP
com<-floor(runif(1,1,4))
cat("Com",rsp_name(com),"|")
cat("=>The winner:",who_won(com,user))
}
R<-1
S<-2
p<-3
rsp_name<-function(n){
if(n==R) return("Rock")
else if(n==S) return("Scissor")
else if(n==P) return("Paper")
else return("BS")
}
who_won<-function(c,u){
if(c==R){
if(u==p){
return ("User:)")
}else if(u==R){
return ("Draw")
}else return("Computer T.T")
}else if(c==S){
if(u==R){
return ("User:)")
}else if(u==S){
return ("Draw")
}else return("Computer T.T")
}else if(c==P){
if(u==S){
return ("User:)")
}else if(u==P){
return ("Draw")
}else return("Computer T.T")
}
}
input=0
while(input!='q'){
#User RSP
input<-readline(prompt="Enter your choice(r/s/p/q(uit)):")
if(input=='r'){
user<-R
}else if(input=='s'){
user<-S
}else if(input=='p'){
user<-P
}else{
user<-0
}
if(input=='q'){
print('Bye~')
break
}else if(user==0){
cat("User:",rsp_name(user),"|")
print("RSP again!")
next #continue
}
#Computer RSP
com<-floor(runif(1,1,4))
cat("Com",rsp_name(com),"|")
cat("User:",rsp_name(com),"|")
cat("=>The winner:",who_won(com,user))
}
R<-1
S<-2
p<-3
rsp_name<-function(n){
if(n==R) return("Rock")
else if(n==S) return("Scissor")
else if(n==P) return("Paper")
else return("BS")
}
who_won<-function(c,u){
if(c==R){
if(u==P){
return ("User:)")
}else if(u==R){
return ("Draw")
}else return("Computer T.T")
}else if(c==S){
if(u==R){
return ("User:)")
}else if(u==S){
return ("Draw")
}else return("Computer T.T")
}else if(c==P){
if(u==S){
return ("User:)")
}else if(u==P){
return ("Draw")
}else return("Computer T.T")
}
}
input=0
while(input!='q'){
#User RSP
input<-readline(prompt="Enter your choice(r/s/p/q(uit)):")
if(input=='r'){
user<-R
}else if(input=='s'){
user<-S
}else if(input=='p'){
user<-P
}else{
user<-0
}
if(input=='q'){
print('Bye~')
break
}else if(user==0){
cat("User:",rsp_name(user),"|")
print("RSP again!")
next #continue
}
#Computer RSP
com<-floor(runif(1,1,4))
cat("Com",rsp_name(com),"|")
cat("User:",rsp_name(com),"|")
cat("=>The winner:",who_won(com,user))
}
b<-20
swap<-function(a,b){
tmp<-a
a<-b
b<-tmp
}
cat(a,b)
swap(a,b)
cat(a,b)
a<-10
b<-20
swap<-function(a,b){
tmp<-a
a<-b
b<-tmp
}
cat(a,b)
swap(a,b)
cat(a,b)
c<-c(10,20)
rswap<-function(vec){
tmp<-vec[1]
vec[1]<-vec[2]
vec[2]<-tmp
return(vec)
}
cat(c)
rswap(c)
cat(c)
c<-c(10,20)
rswap<-function(vec){
tmp<-vec[1]
vec[1]<-vec[2]
vec[2]<-tmp
return(vec)
}
cat(c)
rswap(c)
cat(c)
c<-c(10,20)
rswap<-function(vec){
tmp<-vec[1]
vec[1]<-vec[2]
vec[2]<-tmp
return(vec)
}
cat(c)
rswap(c)
cat(c)
#Call by Reference
c<-c(10,20)
rswap<-function(vec){
tmp<-vec[1]
vec[1]<-vec[2]
vec[2]<-tmp
return(vec)
}
cat(c)
c<-rswap(c)
cat(c)
