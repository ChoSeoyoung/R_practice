if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
sort(names(weight))
for(i in names(sort(weight))){
print(i)
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
favorite<-factor('여름','봄','여름','겨울','봄',
'겨울','여름','여름','봄','가을')
favorite<-factor('여름','봄','여름','겨울','봄',
'겨울','여름','여름','봄','가을')
favorite<-factor('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을')
favorite<-factor(c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을'))
levels(favorite)
unique(favorite)
a=c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을')
unique(a)
levels(a)
country<-factor(c('호주','독일','영국','일본','미국',
'중국','호주','영국','중국','일본',
'터키','미국','중국','중국','호주',
'터키','독일','일본','중국','독일'))
levels(county)
as.integer(country)
levels(country)
post<-list(
user_id:'mr_steve',
post_id:'p11010',
view:37,
image:False,
like:c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=False,
like=c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=False,
like=c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=FALSE,
like=c('creeper','alex','skeleton','enderman'))
post
account<-list(
name='하늘',
number='123-456-789',
balance=4128750,
history=c(-50000,+20000,-32500,-79000,+42000)
)
입금=account[history]
입금=account[history]
입금<-account[history]
입금<-account['history']
입금<-account$history
account<-list(name='하늘',
number='123-468-120566',
balance=4128750,
history=c(-50000,20000,-32500,-79000,42000))
account$history
입금<-account$history
length9account$history[account$history>0])
length(account$history[account$history>0])
length(account$history[account$history<0])
x<-c(2,4,6,8)
y<-c(10,12,14,16)
z<-c(18,20,22,24)
m<-cbind(x,y,z)
m
a<-matrix(v,nrow=3,byrow=T)
v<-seq(from=5,to=60,by=5)
a<-matrix(v,nrow=3,byrow=T)
a
b<-matrix(v,ncol=4,byrow=F)
b
x<-c(2,4,6,8)
y<-c(10,12,14,16)
z<-c(18,20,22,24)
m<-cbind(x,y,z)
m
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4, byrow=F)
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4, byrow=T)
m
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4,byrow=T)
matrix(c(2,4,6,8,
10,12,14,16,
18,20,22,24),
ncol=3,byrow=F)
score<-matrix(c(100,78,80,
80,50,65),
nrow=2,byrow=T)
a<-c(100,78,80)
b<-c(80,50,65)
c<-rbind(a,b)
score
c
m<-matrix(c(9,7,5,3,
8,11,2,9),
nrow=2,byrow=T)
m
m<-matrix(c(9,7,5,3,
8,11,2,9),
nrow=2,byrow=T)
rownames(m)<-c('a','b')
colnames(m)<-c(1,2,3,4)
m
m<-m.t
m<-m.T
m<-m.t()
m
m<-t(m)
m
df<-data.frame(m)
df
df.new<-dataframe(df,info=c(1,2,3,4),rownames='c')
df.new<-data.frame(df,info=c(1,2,3,4),rownames='c')
#df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-data.frame(df,info=c(1,2,3,4))
#df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-rbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
m
m<-t(m)
m<-t(m)
m
df<-data.frame(m)
df
df.new<-data.frame(df,info=c(1,2,3,4))
df.new
class(df.new)
blood<-c('A','O','AB','B','B')
rh<-c('+','+','-','+','+')
age<-c(21,30,43,17,26)
df<-data.frame(blood,rh,age)
df
colnames(df)
rownames(df)
df['blood']
df['blood'][df['blood']!='B']
susbset(df,df['blood']!='B')
subset(df,df['blood']!='B')
class(cars)
dim(cars)
head(cars)
str(cars)
rowMeans(cars)
max(cars$dist)
subset(cars[c('speed','dist')],cars['dist']==max(cars['dist']))
levels(InsectSprays$spray)
table(InsectSprays$spray)
InsectSprays.e=subset(InsectSprays,InsectSprays['spray']=='E')
InsectSprays.e
mean(InsectSprays.e)
colmean(InsectSprays.e)
colMean(InsectSprays.e)
colMeans(InsectSprays.e)
colMeans(InsectSprays.e['count'])
mean(InsectSprays.e['count'])
colMeans(InsectSprays.e['count'])
love<-data.frame(제목,좋아요)
제목<-c('그대랑','다툼','빨래','두통','보조개','매듭','이상해')
좋아요<-c(1,2,3,4,5,6,7)
love<-data.frame(제목,좋아요)
love
best<-subset(love,love['좋아요']==max(love['max']))
best<-subset(love,love['좋아요']==max(love['좋아요']))
best
llist<-list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
llist
list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
c('cyan','magenta','yellow','black')
factor(TRUE, FALSE, FALSE, TRUE)
factor(c(TRUE, FALSE, FALSE, TRUE))
sales<-c(20,15,21,19,33,42,10)
sales
names(sales)<-c('M', 'T', 'W', 'Th', 'F', 'Sa', 'Su')
sales
sort(sales)
good_sales_days(n)<-function{
return(names(sales[sales>=n]))
}
sales[sales>=n]
sales[sales>=30]
names(sales[sales>=30])
good_sales_days <- function(n){
return(names(sales[sales>=n]))
}
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
a <- 10
func <-function() {
a <- 20   # Q3.1. Is it local or global variable?
}
func()
print(a) # Q3.2. what is the value of a?
c('cyan','magenta','yellow','black')
factor(c(TRUE, FALSE, FALSE, TRUE))
list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
sales<-c(20,15,21,19,33,42,10)
sales
names(sales)<-c('M', 'T', 'W', 'Th', 'F', 'Sa', 'Su')
sales
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
for i in good_sales_days(30)
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
factor(good_sales_days(30))
for(i in good_sales_days(30))
print(i)
x<-1:4
y<-5:8
m1<-cbind(x,y)
m1
m2<-rbind(x,y)
m2
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow = 3, byrow=T)
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('열량','나트륨','포화지방')
burger
burger['M']
burger['M',]
bureger['M','na'] #M사의 나트퓸 함량량
bureger['M','나트륨륨'] #M사의 나트퓸 함량량
bureger['M','나트륨'] #M사의 나트퓸 함량량
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow = 3, byrow=T)
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('열량','나트륨','포화지방')
burger
burger['M','나트륨'] #M사의 나트륨 함량량
burger['M',] #M사의 모든 영양 정보
burger[,'열량'] #모든 브랜드의 칼로리 정보
m1<-matrix(1:4,2,2)
m1
m2<-matrix(1:2,2,1)
m2
m1%*%m2
state
class(state)
class(state.x77)
state.x77
class(state.x77)
state.x77
is.matrix(state.x77)
st
is.data.frame(state.x77)
type(state.x77)
class(state.x77)
class(trees)
stre(trees)
girth.mean<-mean(trees$Girth)
trees[trees$Girth>girth.mean && trees$Height>80 && trees$Volume>50]
girth.mean
trees[trees$Girth>girth.mean & trees$Height>80 & trees$Volume>50]
candidate<-subset(trees,Girth>girth.mean & Height>80 & Volume>50)
candidate
x<-c(2,4,6,8)
y<-c(10,12,14,16)
z<-c(18,20,22,24)
m<-cbind(x,y,z)
m
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4,byrow = T)
matrix(c(2,4,6,7,
10,12,14,16,
18,20,22,24),
ncol=3,byrow=F)
matrix(c(2,4,6,8,
10,12,14,16,
18,20,22,24),
ncol=3,byrow=F)
#데이터 입력
age<-c(28,17,35,46,23,67,30,50)
age
#정보 추출
young<-min(age)
old<-max(age)
#처리 결과 출력
cat('가장 젊은 사람의 나이는 ',young,'이고',
'가장 나이든 사람의 나이는 ',old,'입니다.\n')
#처리 결과 출력
cat('가장 젊은 사람의 나이는',young,'이고',
'가장 나이든 사람의 나이는',old,'입니다.\n')
#화면에서 데이터 입력받기
##패키지 설치
install.packages('svDialogs')
library(svDialogs)
user.input<-digInput('Input income')$res
user.input<-dlgInput('Input income')$res
user.inpur
user.input
income<-as.numeric(user.input) #문자열을 숫자로
income
tax<-income*0.05 #세금 계산
cat('세금:',tax)
x<-26
y<-'입니다'
z<-c(10,20,30,40)
print(x) #하나의 값 출력
print(y) #하나의 값 출력
print(z) #벡터 출력
print(irix[1:5,]) #데이터프레임 출력
print(x,y) #두 개의 값 출력(에러 발생)
x<-26
y<-'입니다'
z<-c(10,20,30,40)
print(x) #하나의 값 출력
print(y) #하나의 값 출력
print(z) #벡터 출력
print(iris[1:5,]) #데이터프레임 출력
print(x,y) #두 개의 값 출력(에러 발생)
library(svDialogs)
height<-as.numeric(dlgInput('Input height(cm)')$res)
weight<-as.numeric(dlgInput('Input weight(kg)')$res)
height<-height/100
bmi<-weight/(height^2)
cat('입력한 키는',height*100,'cm, 몸무게는',weight,'kg 입니다.\n',sep="")
cat('입력한 키는',height*100,'cm, 몸무게는',weight,'kg 입니다.\n")
cat('입력한 키는',height*100,'cm, 몸무게는',weight,'kg 입니다.\n')
cat('입력한 키는',height*100,'cm, 몸무게는',weight,'kg 입니다.\n',sep="")
cat('BMI는',bmi,'입니다',sep="")
cat('BMI는',bmi,'입니다',sep=" ")
getwd() #현재 작업 폴더 알아내기
setwd('C:\Users\Cho\Desktop\단국\2학년 2학기\데이터사이언스')
getwd()
setwd('C:\\Users\\Cho\\Desktop\\단국\\2학년 2학기\\데이터사이언스')
getwd()
setwd('C:\Users\Cho\Desktop\단국\2학년 2학기\데이터사이언스\수업자료, 복습')
getwd()
setwd(r'C:\Users\Cho\Desktop\단국\2학년 2학기\데이터사이언스\수업자료, 복습')
setwd('C:\\Users\\Cho\\Desktop\\단국\\2학년 2학기\\데이터사이언스\\수업자료, 복습')
getwd()
#.csv파일에서 데이터 읽기
air<-read.csv('auto-mpg.csv',header=T) #csv파일 읽기
head(air)
class(air)
my.iris<-subsuet(iris,Species=='setosa')
write.csv(my.iris,'my_iris.csv',row.names=F)
#.csv파일에 데이터 쓰기
my.iris<-subset(iris,Species=='setosa')
write.csv(my.iris,'my_iris.csv',row.names=F)
write.csv(my.iris,'my_iris.csv',row.names=T)
my.iris<-subset(iris,Species=='setosa')
write.csv(my.iris,'my_iris2.csv',row.names=T) #인덱스 번호가 매겨짐
write.csv(my.iris,'my_iris.csv',row.names=F)
#엑셀 파일 읽기와 쓰기
library(xlsx)
#엑셀 파일 읽기와 쓰기
install.packages('xlsx')
library(xlsx)
air<-read.xlsx("auto-mpg.xlsx",header=T,sheetIndex=1)
head(air)
air<-read.xlsx("auto-mpg.xlsx",header=F,sheetIndex=1)
head(air)
air<-read.xlsx("auto-mpg.xlsx",header=T,sheetIndex=1)
head(air)
##LAB2. 다이아몬드 정보 제공하기
library(ggplot2)
str(diamonds)
##LAB2. 다이아몬드 정보 제공하기
library(ggplot)
##LAB2. 다이아몬드 정보 제공하기
library(ggplot)
str(diamonds)
##LAB2. 다이아몬드 정보 제공하기
library(ggplot2)
install.packages(ggplot2
)
install.packages(ggplot2)
install.packages(ggplot)
install.packages('ggplot2')
##LAB2. 다이아몬드 정보 제공하기
library(ggplot2)
str(diamonds)
diamonds.new<-subset(diamonds, cut=='Premium' & carat>=2)
writs.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
library(xlsx)
writs.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
library(ggplot2)
str(diamonds)
diamonds.new<-subset(diamonds, cut=='Premium' & carat>=2)
write.csv(diamonds.new,'shiny_diamonds.csv',row.names=F) #행번호는 제외하라.
diamonds.load<-read.csv('shiny_diamonds.csv',header=T) #첫 번째 행에는 열 이름이 위치
diamonds.new<-subset(diamonds.load,color!='D')
library(xlsx)
writs.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
library(xlsx)
writs.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
library(xlsx)
writs.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
library(xlsx)
library(xlsx)
writs.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
library(xlsx)
write.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
#3.파일 입출력에서 알아야 할 내용을 확인합니다.
print('Begin work')
a<-10; b<-20
sink('result.txt',append=T)
sink()
cat('hello world\n')
sink('result.txt',append=T)
cat('a*b=',a*b,'\n')
sink()
print("End work")
library(xlsx)
write.xlsx(diamonds.new, 'shinky_diamonds.xlsx',row.names=T)
print('Begin work')
a<-10; b<-20
sink('result.txt',append=T)
cat('a+b=',a+b,'\n')
sink()
cat('hello world\n')
sink('result.txt',append=T)
cat('a*b=',a*b,'\n')
sink()
print("End work")
cat('1부터 10까지 자연수의 합은',sum(a),'입니다.\n')
a<-1:10
b<-1:100
sink('result.txt',append=T)
cat('1부터 10까지 자연수의 합은',sum(a),'입니다.\n')
cat('1부터 100까지 자연수의 합은',sum(b),'입니다.\n')
sink()
library(svDialogs)
height<-dlgInput('Input height(cm)')$res
weight<-dlgInput('Input weight(kg)')$res
height<-as.numeric(height)
weight<-as.numeric(weight)
height<-height/100
bmi<-weight/(height^2)
sink('bmi.txt',append=T)
cat(height*100,weight,bmi)
cat('\n')
sink()
library(svDialogs)
height<-dlgInput('Input height(cm)')$res
weight<-dlgInput('Input weight(kg)')$res
height<-as.numeric(height)
weight<-as.numeric(weight)
height<-height/100
bmi<-weight/(height^2)
sink('bmi.txt',append=T)
cat(height*100,weight,bmi)
cat('\n')
sink()
result<-read.table('bmi.txt',sep=" ")
result
names(result)<-c('height','weight','bmi')
write.table(result,'bmi_new.txt',row.names=T)
write.table(result,'bmi_new.txt',row.names=F)
