a<-25:150
condi<-a[a%%3==0 & a<100]
length(condi)
a
a<-c('good','great','bad','okay','good','bad','good')
f<-factor(a)
class(a)
f<-factor(a)
levels(f)
class(f)
price<-c(76000,52000,36000)
promotion<-c(5,10,5)
price/100*(100-promotion)
smartphone<-list(model="iphone_se",
capacity=c(64,128,256),
display='Retina',
color=c('black','red','white'))
smartphone['color']
smartphone$color
weight<-c(56,23,89,46,76,14,97,72,68,62,35) #단위 kg
names(weight)<-c('a','b','c','d','e','f','g','h','i','j','k')
for(i in sort(names(weight))){
if(sum(weight)-weight[i]>600){
print(i)
break
}
}
for(i in sort(names(weight))){
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
for(i in sort(names(weight))){
print(i)
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
sort(names(weight))
for(i in names(sort(weight))){
print(i)
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
favorite<-factor('여름','봄','여름','겨울','봄',
'겨울','여름','여름','봄','가을')
favorite<-factor('여름','봄','여름','겨울','봄',
'겨울','여름','여름','봄','가을')
favorite<-factor('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을')
favorite<-factor(c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을'))
levels(favorite)
unique(favorite)
a=c('여름','봄','여름','겨울','봄','겨울','여름','여름','봄','가을')
unique(a)
levels(a)
country<-factor(c('호주','독일','영국','일본','미국',
'중국','호주','영국','중국','일본',
'터키','미국','중국','중국','호주',
'터키','독일','일본','중국','독일'))
levels(county)
as.integer(country)
levels(country)
post<-list(
user_id:'mr_steve',
post_id:'p11010',
view:37,
image:False,
like:c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=False,
like=c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=False,
like=c('creeper','alex','skeleton','enderman'))
post
post<-list(
user_id='mr_steve',
post_id='p11010',
view=37,
image=FALSE,
like=c('creeper','alex','skeleton','enderman'))
post
account<-list(
name='하늘',
number='123-456-789',
balance=4128750,
history=c(-50000,+20000,-32500,-79000,+42000)
)
입금=account[history]
입금=account[history]
입금<-account[history]
입금<-account['history']
입금<-account$history
account<-list(name='하늘',
number='123-468-120566',
balance=4128750,
history=c(-50000,20000,-32500,-79000,42000))
account$history
입금<-account$history
length9account$history[account$history>0])
length(account$history[account$history>0])
length(account$history[account$history<0])
x<-c(2,4,6,8)
y<-c(10,12,14,16)
z<-c(18,20,22,24)
m<-cbind(x,y,z)
m
a<-matrix(v,nrow=3,byrow=T)
v<-seq(from=5,to=60,by=5)
a<-matrix(v,nrow=3,byrow=T)
a
b<-matrix(v,ncol=4,byrow=F)
b
x<-c(2,4,6,8)
y<-c(10,12,14,16)
z<-c(18,20,22,24)
m<-cbind(x,y,z)
m
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4, byrow=F)
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4, byrow=T)
m
matrix(c(2,10,18,
4,12,20,
6,14,22,
8,16,24),
nrow=4,byrow=T)
matrix(c(2,4,6,8,
10,12,14,16,
18,20,22,24),
ncol=3,byrow=F)
score<-matrix(c(100,78,80,
80,50,65),
nrow=2,byrow=T)
a<-c(100,78,80)
b<-c(80,50,65)
c<-rbind(a,b)
score
c
m<-matrix(c(9,7,5,3,
8,11,2,9),
nrow=2,byrow=T)
m
m<-matrix(c(9,7,5,3,
8,11,2,9),
nrow=2,byrow=T)
rownames(m)<-c('a','b')
colnames(m)<-c(1,2,3,4)
m
m<-m.t
m<-m.T
m<-m.t()
m
m<-t(m)
m
df<-data.frame(m)
df
df.new<-dataframe(df,info=c(1,2,3,4),rownames='c')
df.new<-data.frame(df,info=c(1,2,3,4),rownames='c')
#df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-data.frame(df,info=c(1,2,3,4))
#df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-cbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
df.new<-rbind(df,info=c(1,2,3,4),row.names=NULL)
df.new
m
m<-t(m)
m<-t(m)
m
df<-data.frame(m)
df
df.new<-data.frame(df,info=c(1,2,3,4))
df.new
class(df.new)
blood<-c('A','O','AB','B','B')
rh<-c('+','+','-','+','+')
age<-c(21,30,43,17,26)
df<-data.frame(blood,rh,age)
df
colnames(df)
rownames(df)
df['blood']
df['blood'][df['blood']!='B']
susbset(df,df['blood']!='B')
subset(df,df['blood']!='B')
class(cars)
dim(cars)
head(cars)
str(cars)
rowMeans(cars)
max(cars$dist)
subset(cars[c('speed','dist')],cars['dist']==max(cars['dist']))
levels(InsectSprays$spray)
table(InsectSprays$spray)
InsectSprays.e=subset(InsectSprays,InsectSprays['spray']=='E')
InsectSprays.e
mean(InsectSprays.e)
colmean(InsectSprays.e)
colMean(InsectSprays.e)
colMeans(InsectSprays.e)
colMeans(InsectSprays.e['count'])
mean(InsectSprays.e['count'])
colMeans(InsectSprays.e['count'])
love<-data.frame(제목,좋아요)
제목<-c('그대랑','다툼','빨래','두통','보조개','매듭','이상해')
좋아요<-c(1,2,3,4,5,6,7)
love<-data.frame(제목,좋아요)
love
best<-subset(love,love['좋아요']==max(love['max']))
best<-subset(love,love['좋아요']==max(love['좋아요']))
best
llist<-list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
llist
list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
c('cyan','magenta','yellow','black')
factor(TRUE, FALSE, FALSE, TRUE)
factor(c(TRUE, FALSE, FALSE, TRUE))
sales<-c(20,15,21,19,33,42,10)
sales
names(sales)<-c('M', 'T', 'W', 'Th', 'F', 'Sa', 'Su')
sales
sort(sales)
good_sales_days(n)<-function{
return(names(sales[sales>=n]))
}
sales[sales>=n]
sales[sales>=30]
names(sales[sales>=30])
good_sales_days <- function(n){
return(names(sales[sales>=n]))
}
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
a <- 10
func <-function() {
a <- 20   # Q3.1. Is it local or global variable?
}
func()
print(a) # Q3.2. what is the value of a?
c('cyan','magenta','yellow','black')
factor(c(TRUE, FALSE, FALSE, TRUE))
list(name='Young',
age=30,
gender='F',
student=FALSE,
transactions=c(30000,2000,15000,80000)
)
sales<-c(20,15,21,19,33,42,10)
sales
names(sales)<-c('M', 'T', 'W', 'Th', 'F', 'Sa', 'Su')
sales
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
for i in good_sales_days(30)
good_sales_days<-function(n){
return(names(sales[sales>=n]))
}
good_sales_days(30)
factor(good_sales_days(30))
for(i in good_sales_days(30))
print(i)
x<-1:4
y<-5:8
m1<-cbind(x,y)
m1
m2<-rbind(x,y)
m2
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow = 3, byrow=T)
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('열량','나트륨','포화지방')
burger
burger['M']
burger['M',]
bureger['M','na'] #M사의 나트퓸 함량량
bureger['M','나트륨륨'] #M사의 나트퓸 함량량
bureger['M','나트륨'] #M사의 나트퓸 함량량
burger<-matrix(c(514,917,11,
533,853,13,
566,888,10),
nrow = 3, byrow=T)
rownames(burger)<-c('M','L','B')
colnames(burger)<-c('열량','나트륨','포화지방')
burger
burger['M','나트륨'] #M사의 나트륨 함량량
burger['M',] #M사의 모든 영양 정보
burger[,'열량'] #모든 브랜드의 칼로리 정보
m1<-matrix(1:4,2,2)
m1
m2<-matrix(1:2,2,1)
m2
m1%*%m2
state
class(state)
class(state.x77)
state.x77
class(state.x77)
state.x77
is.matrix(state.x77)
st
is.data.frame(state.x77)
type(state.x77)
class(state.x77)
class(trees)
stre(trees)
girth.mean<-mean(trees$Girth)
trees[trees$Girth>girth.mean && trees$Height>80 && trees$Volume>50]
girth.mean
trees[trees$Girth>girth.mean & trees$Height>80 & trees$Volume>50]
candidate<-subset(trees,Girth>girth.mean & Height>80 & Volume>50)
candidate
library(svDialogs)
height<-as.numeric(dlgInput(height)$res)
weight<-as.numeric(dlgInput(weight)$res)
bmi<-function(h,w){
h<-h/100
return (w/(h^2))
}
bmi(height,weight)
library(svDialogs)
height<-as.numeric(dlgInput('height')$res)
weight<-as.numeric(dlgInput('weight')$res)
bmi<-function(h,w){
h<-h/100
return (w/(h^2))
}
bmi(height,weight)
#CSV input/output
setwd('C:\\Users\\Cho\\Desktop\\단국\\2학년 2학기\\데이터사이언스\\수업자료, 복습')
setwd('C:\\Users\\Cho\\Desktop\\단국\\2학년 2학기\\데이터사이언스\\수업자료, 복습')
air=read.csv('airquality.csv',header=T,sheetIndex=1)
air=read.csv('airquality.csv',header=T)
air
mt.iris<-subset(iris,Species=='setosa')
my.iris<-subset(iris,Species=='setosa')
myiris
my.iris
write.xlsx(my.iris,"my.iris.xlsx",row.names = F)
#xlsx input/output
library(xlsx)
my.iris<-subset(iris,Species=='setosa')
my.iris
write.xlsx(my.iris,"my.iris.xlsx",row.names = F)
##LAB2
library(ggplot2)
str(diamonds)
diamonds.new<-subset(diamonds, cut=='Premium'&caret>=2)
diamonds.new<-subset(diamonds, cut=='Premium' & carat>=2)
diamonds.new
write.csv(diamonds.new, 'shiny_diamonds.csv',row.names=F)
air=read.csv('airquality.csv',header=T,sheetIndex=1)
air=read.csv('airquality.csv',header=T)
my.iris_output=read.xlsx('my.iris.xlsx',header=T,sheetIndex=1)
my.iris_output
my.iris_output=read.xlsx('my.iris.xlsx',header=T,sheetIndex=1,row.names=F)
my.iris_output=read.xlsx('my.iris.xlsx',header=T,sheetIndex=1)
my.iris_output
library(svDialogs)
height<-as.numeric(dlgInput('height')$res)
weight<-as.numeric(dlgInput('weight')$res)
bmi<-function(h,w){
h<-h/100
return (w/(h^2))
}
bmi(height,weight)
#CSV input/output
setwd('C:\\Users\\Cho\\Desktop\\단국\\2학년 2학기\\데이터사이언스\\수업자료, 복습')
air=read.csv('airquality.csv',header=T)
air
#xlsx input/output
library(xlsx)
my.iris<-subset(iris,Species=='setosa')
my.iris
write.xlsx(my.iris,"my.iris.xlsx",row.names = F)
my.iris_output=read.xlsx('my.iris.xlsx',header=T,sheetIndex=1)
my.iris_output
##LAB2
library(ggplot2)
str(diamonds)
diamonds.new<-subset(diamonds, cut=='Premium' & carat>=2)
diamonds.new
write.csv(diamonds.new, 'shiny_diamonds.csv',row.names=F)
diamonds.load<-read.csv('shiny_diamonds.csv',header=T)
diamonds.new<-subset(diamonds.load,color!='D')
write.xlsx(diamonds.new,'diamonds_new.xlsx',row.names = F)
diamonds.new
weight<-c(56,23,89,46,76,14,97,72,68,62,35) #단위kg
names(weight)<-c('a','b','c','d','e','f','g','h','i','j','k')
weight<-c(56,23,89,46,76,14,97,72,68,62,35) #단위kg
names(weight)<-c('a','b','c','d','e','f','g','h','i','j','k')
for(i in names(sort(weight))){
if(sum(weight)-weight[i]<=600){
print(i)
break
}
}
overWeight<-function(w){
return (w[w>50])
}
overweight(weight)
overWeight(weight)
library(svDialogs)
library(xlsx)
carprice.new<-read.csv('carprice.csv',header=T)
str(carprice.new)
class(carprice.new)
carprice.new
input.type<-dlgInput('Input type')$res
input.city<-dlgInput('Input MPG.city')$res
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type & MPG.city==input.type)
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type & MPG.city==input.type)
carprice.new<-read.csv('carprice.csv',header=T)
carprice.new
input.type<-dlgInput('Input type')$res
input.city<-dlgInput('Input MPG.city')$res
input.city<-as.numeric(input.city)
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type & MPG.city==input.type)
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type & MPG.city==input.city)
input.city<-dlgInput('Input MPG.city')$res
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type & MPG.city==input.city)
carprice.new['MPG.city']
type(carprice.new['MPG.city'])
class(carprice.new['MPG.city'])
levels(carprice.new['MPG.city'])
carprice.new['MPG.city']=='5'
carprice.new['MPG.city']==5
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type && MPG.city==input.city)
input.type<-dlgInput('Input type')$res
input.city<-dlgInput('Input MPG.city')$res
input.city<-as.numeric(input.city)
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type && MPG.city==input.city)
##조건에 맞는 파일 추출하기
subset(carprice.new,Type==input.type && MPG.city>=input.city)
##조건에 맞는 파일 추출하기
result<-subset(carprice.new,Type==input.type && MPG.city>=input.city)
result
carprice.new <- read.csv('carprice.csv', header = T)
str(carprice.new)
result <- subset(carprice.new, Type == input.type &
MPG.city >= input.city )
print(result)
carprice.new<-read.csv('carprice.csv',header=T)
str(carprice.new)
##조건에 맞게 입력받기
input.type<-dlgInput('Input type')$res
input.city<-dlgInput('Input MPG.city')$res
input.city<-as.numeric(input.city)
##조건에 맞는 파일 추출하기
result<-subset(carprice.new,Type==input.type && MPG.city>=input.city)
result
##조건에 맞는 파일 추출하기
result<-subset(carprice.new,Type==input.type & MPG.city>=input.city)
result
sink('search.txt',append=T)
print(result)
sink()
write.xlsx(result,'search.xlsx',row.names=F)
#추가조건을 만족하는 것들을 search.txt파일에 추가
result2=subset(carprice.new,(Type=='Compact' & MPG.city==20)|(Type=='Small' & MPG.city==30))
result2
#추가조건을 만족하는 것들을 search.txt파일에 추가
result2=subset(carprice.new,(Type=='Compact' & MPG.city>=20)|(Type=='Small' & MPG.city>=30))
result2
print(result2)
sink('search.txt',append=T)
print(result2)
sink()
